import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchBarang, uploadFormData, updateFormData, deleteItems } from './barangAPI';

const initialState = {
  list:[],
  listSearch:[],
  searchField:"",
  pageActive:1,
  value: 0,
  status: 'idle',
  show:false,
  modal:"",
  barangActive:null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'barang/fetchBarang',
  async (amount) => {
    const response = await fetchBarang(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const uploadForm = createAsyncThunk(
  'barang/uploadFormData',
  async (data) => {
    const url = "url"
    const response = await uploadFormData(url,data);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const updateForm = createAsyncThunk(
  'barang/updateFormData',
  async (data) => {
    const url = `url${data.original.nama}`
    console.log("updateForm 2",data);
    const response = await updateFormData(url, data);
    console.log("updateForm 2 response",response);
    // The value we return becomes the `fulfilled` action payload
    return {data: response.data, original:data.original, key:data.index};
  }
);

export const deleteItem = createAsyncThunk(
  'barang/deleteItems',
  async (data) => {
    const url = "url"+"/id"
    const response = await deleteItems(url,data);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const barangSlice = createSlice({
  name: 'barang',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
    popupDesc: (state, action) => {
      state.modal = action.payload;
    },
    popupShow: (state) => {
      state.show = true;
    },
    popupHide: (state) => {
      console.log("hide");
      state.show = false;
    },
    setActive: (state, action) => {
      state.barangActive = action.payload;
    },
    setSearch: (state, action) => {
      state.listSearch = action.payload
    },
    searchField: (state, action) => {
      state.searchField = action.payload
    },
    setPageActive: (state, action) => {
      state.pageActive = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(uploadForm.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(uploadForm.fulfilled, (state, action) => {
        let data = action.payload
          data['foto'] = data['foto']['name']
          state.status = 'idle';
          state.show = false;
          state.list = [...state.list, data]
      })
      .addCase(updateForm.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateForm.fulfilled, (state, action) => {
        const original = action.payload.original
        const key = action.payload.key
        let data = action.payload.data
          data['foto'] = data['foto'] === null ? original['foto'] : data['foto']['name']
          state.status = 'idle';
          state.show = false;

          state.list = [
            ...state.list.slice(0, key),
            data,
            ...state.list.slice(key + 1)
          ]
        console.log("updateForm 2 ",action.payload);
      })
      .addCase(deleteItem.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteItem.fulfilled, (state, action) => {
          state.status = 'idle';
          state.show = false;
          state.list = [
            ...state.list.slice(0, action.payload),
            ...state.list.slice(action.payload + 1)
          ]
          console.log("Test abc delete", action.payload)
      })
  },
});

export const { increment, decrement, incrementByAmount, submitForm, popupDesc, popupShow, popupHide, setActive, setSearch, searchField, setPageActive } = barangSlice.actions;

export const selectBarang = (state) => state.barang.list;
export const selectBarangSearch = (state) => state.barang.listSearch;
export const selectBarangSearchField = (state) => state.barang.searchField;
export const selectPopup = (state) => state.barang.show;
export const selectModalDesc = (state) => state.barang.modal;
export const selectBarangAction = (state) => state.barang.barangActive;
export const selectPageActive = (state) => state.barang.pageActive;


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.barang.value)`
// export const selectBarang = (state) => state.barang.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectBarang(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};


export default barangSlice.reducer;
